---
- name: Setup NGINX with stream support on Amazon Linux 2023
  hosts: proxy
  become: true

  vars:
    full_url: "{{ customer }}.{{ target_environment }}.{{ simple_url }}"

  tasks:
    - name: Ensure start marker exists
      ansible.builtin.lineinfile:
        path: /etc/nginx/nginx.conf
        line: "# BEGIN FRONTEND ROUTING BLOCK"
        insertafter: "^http \\{"
        state: present

    - name: Ensure end marker exists
      ansible.builtin.lineinfile:
        path: /etc/nginx/nginx.conf
        line: "# END FRONTEND ROUTING BLOCK"
        insertbefore: "^\\s*}"
        state: present

    - name: Insert HTTP redirect server block
      ansible.builtin.lineinfile:
        path: /etc/nginx/nginx.conf
        insertafter: "# BEGIN FRONTEND ROUTING BLOCK"
        line: |
          server {
                  listen 80;
                  server_name {{ full_url }};
                  return 301 https://$host$request_uri;
          }
        state: present

    - name: Insert frontend server block (if frontend exists)
      ansible.builtin.lineinfile:
        path: /etc/nginx/nginx.conf
        insertafter: "# BEGIN FRONTEND ROUTING BLOCK"
        line: |
          server {
              listen 443 ssl;
              server_name {{ full_url }};

              ssl_certificate /etc/ssl/{{ full_url }}.pem;
              ssl_certificate_key /etc/ssl/{{ full_url }}.pem.key;

              location /docs  {
                    proxy_pass http://{{ backend_vms_private_ips['frontend'] }}:8080/docs;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
              }

              location /openapi.json  {
                    proxy_pass http://{{ backend_vms_private_ips['frontend'] }}:8080/openapi.json;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
              }

              location /api/  {
                    proxy_pass http://10.0.1.6:8080/api/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;

                    # Enable WebSocket support (if needed)
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";

                    # Pass request and response headers properly
                    proxy_pass_request_headers on;
                    add_header Access-Control-Allow-Origin * always;
                    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, DELETE, PUT" always;
                    add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;

                    # For preflight
                    if ($request_method = OPTIONS ) {
                        add_header Access-Control-Allow-Origin *;
                        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, DELETE, PUT";
                        add_header Access-Control-Allow-Headers "Content-Type, Authorization";
                        add_header Content-Length 0;
                        add_header Content-Type text/plain;
                        return 204;
                    }
              }

              location /  {
                    proxy_pass http://{{ backend_vms_private_ips['frontend'] }}:5173;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
        state: present
      when: "'frontend' in backend_vms_private_ips"

    - name: Insert nifi server block (if nifi exists)
      ansible.builtin.lineinfile:
        path: /etc/nginx/nginx.conf
        insertafter: "# BEGIN FRONTEND ROUTING BLOCK"
        line: |
          server {
              listen 8443 ssl;
              server_name {{ full_url }};

              ssl_certificate /etc/ssl/{{ full_url }}.pem;
              ssl_certificate_key /etc/ssl/{{ full_url }}.pem.key;

              location /  {
                    proxy_pass http://{{ backend_vms_private_ips['nifi'] }}:8080/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
        state: present
      when: "'nifi' in backend_vms_private_ips"

    - name: Insert smb server block (if smb exists)
      ansible.builtin.lineinfile:
        path: /etc/nginx/nginx.conf
        insertafter: "# BEGIN FRONTEND ROUTING BLOCK"
        line: |
          server {
              listen 8080 ssl;
              server_name {{ full_url }};

              ssl_certificate /etc/ssl/{{ full_url }}.pem;
              ssl_certificate_key /etc/ssl/{{ full_url }}.pem.key;

              location /  {
                    proxy_pass http://{{ backend_vms_private_ips['smb'] }}:8080/;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
        state: present
      when: "'smb' in backend_vms_private_ips"

    # - name: Create TCP stream config
    #   ansible.builtin.copy:
    #     dest: /etc/nginx/stream.d/{{ customer }}_{{ target_environment }}.conf
    #     content: |
    #         upstream postgres {
    #             server {{ db_host }}:{{ db_port }};
    #         }

    #         server {
    #             listen 5432;
    #             proxy_pass postgres;
    #         }

    - name: Test nginx configuration
      ansible.builtin.command: nginx -t
      register: nginx_test
      changed_when: false
      failed_when: nginx_test.rc != 0

    - name: Restart nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
